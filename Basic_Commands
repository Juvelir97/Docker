$ docker run <name>
$ docker run -d nginx:1.18.0  # Running Docker containers in the background
$ docker ps [-a] # list of running containers [all]
$ docker logs <container ID>
$ docker run -d --name nginx --restart unless-stopped -p 80:80 --memory 1000M --memory-reservation 250M nginx:1.18.0
            |                           |     {ports host:container}   |                
      {background mode}  {Always automatically restart on failures}  {Limit the container memory}
$ docker stop nginx && docker rm nginx (or docker rm -f nginx) # Removing

$ docker top <container ID> # Display running processes

$ docker inspect <container ID> # Show container info

$ docker stats # Display stat of running containers(CPU/MEM)

$ docker exec -it <cont_name> <command> # Connect to container (define -u to connect with spec. user)

$ docker commit <container ID> <name:tag> # Make a new image from running container 

$ docker run --rm <image_name> # Remove conteiner after exit


# Check docker container IP
          $  docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' container_name_or_id


# Upload image to Docker Hub
            1) docker login
            2) docker push <repository>/<imagename>
            
# Round Robin
            1) Create new network : docker network create $name
            2) Run 2 or more containers: docker run -d --network $name --network-alias $alias <image>
            3) Test with nslookup: docker run --rm --network $name <image_name> nslookup $alias
            4) Test with curl: docker run --rm --network $name <image_name> curl -s $alias
